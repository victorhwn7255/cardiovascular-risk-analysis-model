# This file is generated by numpy's build process
# It contains system_info results at the time of building this package.
from enum import Enum
from numpy._core._multiarray_umath import (
    __cpu_features__,
    __cpu_baseline__,
    __cpu_dispatch__,
)

__all__ = ["show_config"]
_built_with_meson = True


class DisplayModes(Enum):
    stdout = "stdout"
    dicts = "dicts"


def _cleanup(d):
    """
    Removes empty values in a `dict` recursively
    This ensures we remove values that Meson could not provide to CONFIG
    """
    if isinstance(d, dict):
        return {k: _cleanup(v) for k, v in d.items() if v and _cleanup(v)}
    else:
        return d


CONFIG = _cleanup(
    {
        "Compilers": {
            "c": {
                "name": "clang",
                "linker": r"ld64",
                "version": "14.0.6",
                "commands": r"arm64-apple-darwin20.0.0-clang",
                "args": r"-ftree-vectorize, -fPIC, -fPIE, -fstack-protector-strong, -O2, -pipe, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -fdebug-prefix-map=/var/folders/k1/30mswbxs7r1g6zwn8y4fyt500000gp/T/abs_2bgq2wg6lu/croot/numpy_and_numpy_base_1738078509889/work=/usr/local/src/conda/numpy-base-2.2.2, -fdebug-prefix-map=/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env=/usr/local/src/conda-prefix, -D_FORTIFY_SOURCE=2, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -mmacosx-version-min=11.1",
                "linker args": r"-Wl,-pie, -Wl,-headerpad_max_install_names, -Wl,-dead_strip_dylibs, -Wl,-rpath,/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib, -L/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib, -ftree-vectorize, -fPIC, -fPIE, -fstack-protector-strong, -O2, -pipe, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -fdebug-prefix-map=/var/folders/k1/30mswbxs7r1g6zwn8y4fyt500000gp/T/abs_2bgq2wg6lu/croot/numpy_and_numpy_base_1738078509889/work=/usr/local/src/conda/numpy-base-2.2.2, -fdebug-prefix-map=/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env=/usr/local/src/conda-prefix, -D_FORTIFY_SOURCE=2, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -mmacosx-version-min=11.1",
            },
            "cython": {
                "name": "cython",
                "linker": r"cython",
                "version": "3.0.11",
                "commands": r"cython",
                "args": r"",
                "linker args": r"",
            },
            "c++": {
                "name": "clang",
                "linker": r"ld64",
                "version": "14.0.6",
                "commands": r"arm64-apple-darwin20.0.0-clang++",
                "args": r"-ftree-vectorize, -fPIC, -fPIE, -fstack-protector-strong, -O2, -pipe, -stdlib=libc++, -fvisibility-inlines-hidden, -fmessage-length=0, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -fdebug-prefix-map=/var/folders/k1/30mswbxs7r1g6zwn8y4fyt500000gp/T/abs_2bgq2wg6lu/croot/numpy_and_numpy_base_1738078509889/work=/usr/local/src/conda/numpy-base-2.2.2, -fdebug-prefix-map=/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env=/usr/local/src/conda-prefix, -D_FORTIFY_SOURCE=2, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -mmacosx-version-min=11.1",
                "linker args": r"-Wl,-pie, -Wl,-headerpad_max_install_names, -Wl,-dead_strip_dylibs, -Wl,-rpath,/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib, -L/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib, -ftree-vectorize, -fPIC, -fPIE, -fstack-protector-strong, -O2, -pipe, -stdlib=libc++, -fvisibility-inlines-hidden, -fmessage-length=0, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -fdebug-prefix-map=/var/folders/k1/30mswbxs7r1g6zwn8y4fyt500000gp/T/abs_2bgq2wg6lu/croot/numpy_and_numpy_base_1738078509889/work=/usr/local/src/conda/numpy-base-2.2.2, -fdebug-prefix-map=/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env=/usr/local/src/conda-prefix, -D_FORTIFY_SOURCE=2, -isystem, /Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include, -mmacosx-version-min=11.1",
            },
        },
        "Machine Information": {
            "host": {
                "cpu": "aarch64",
                "family": "aarch64",
                "endian": "little",
                "system": "darwin",
            },
            "build": {
                "cpu": "aarch64",
                "family": "aarch64",
                "endian": "little",
                "system": "darwin",
            },
            "cross-compiled": bool("False".lower().replace("false", "")),
        },
        "Build Dependencies": {
            "blas": {
                "name": "openblas",
                "found": bool("True".lower().replace("false", "")),
                "version": "0.3.21",
                "detection method": "pkgconfig",
                "include directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include",
                "lib directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib",
                "openblas configuration": r"USE_64BITINT= DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK=0 NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP=0 VORTEX MAX_THREADS=128",
                "pc file directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib/pkgconfig",
            },
            "lapack": {
                "name": "openblas",
                "found": bool("True".lower().replace("false", "")),
                "version": "0.3.21",
                "detection method": "pkgconfig",
                "include directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/include",
                "lib directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib",
                "openblas configuration": r"USE_64BITINT= DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK=0 NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP=0 VORTEX MAX_THREADS=128",
                "pc file directory": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/lib/pkgconfig",
            },
        },
        "Python Information": {
            "path": r"/Users/victor_he/Downloads/AI_ML_Projects/heart_disease_project/env/bin/python",
            "version": "3.11",
        },
        "SIMD Extensions": {
            "baseline": __cpu_baseline__,
            "found": [
                feature for feature in __cpu_dispatch__ if __cpu_features__[feature]
            ],
            "not found": [
                feature for feature in __cpu_dispatch__ if not __cpu_features__[feature]
            ],
        },
    }
)


def _check_pyyaml():
    import yaml

    return yaml


def show(mode=DisplayModes.stdout.value):
    """
    Show libraries and system information on which NumPy was built
    and is being used

    Parameters
    ----------
    mode : {`'stdout'`, `'dicts'`}, optional.
        Indicates how to display the config information.
        `'stdout'` prints to console, `'dicts'` returns a dictionary
        of the configuration.

    Returns
    -------
    out : {`dict`, `None`}
        If mode is `'dicts'`, a dict is returned, else None

    See Also
    --------
    get_include : Returns the directory containing NumPy C
                  header files.

    Notes
    -----
    1. The `'stdout'` mode will give more readable
       output if ``pyyaml`` is installed

    """
    if mode == DisplayModes.stdout.value:
        try:  # Non-standard library, check import
            yaml = _check_pyyaml()

            print(yaml.dump(CONFIG))
        except ModuleNotFoundError:
            import warnings
            import json

            warnings.warn("Install `pyyaml` for better output", stacklevel=1)
            print(json.dumps(CONFIG, indent=2))
    elif mode == DisplayModes.dicts.value:
        return CONFIG
    else:
        raise AttributeError(
            f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
        )


def show_config(mode=DisplayModes.stdout.value):
    return show(mode)


show_config.__doc__ = show.__doc__
show_config.__module__ = "numpy"
